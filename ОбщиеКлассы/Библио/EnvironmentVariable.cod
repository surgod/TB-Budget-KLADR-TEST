class "переменные среды (environment) ОС";

-- класс для обращения с переменным среды выполнения операционной системы
-- методы и свойства класса Environmentvariable

--create - создать объект для доступа к environment
--func getenvvar(envvarname, [envowner])-> string - считать переменную envvarname
--     принадлежащую envowner, по умолчанию читается из <System>
--func getEnvVarAllOwners(EnvVarName: String): String[];
--     взять значения переменной EnvVarName для всех владельцев окружения
--func getenvvarowners: string[]
--     получить список всех владельцев сред выполнения
--proc setenvvar(envvarname, envvarvalue, [envowner])
--     установить переменную среды, принадлежащую envowner, по умолчанию <System>
--proc remenvvar(envvarname, [envowner])
--     удалить переменную среды, принадлежащую envowner, по умолчанию <System>
-- owner - владелец среды
-- name  - имя переменной
-- value - значение переменной

inclass public

  const WMImoniker: String = "winmgmts:\\.\root\cimv2";
  --const WMImoniker: String = "winmgmts://./root/cimv2";
  const WMIEnvClass: String = "winmgmts://./root/cimv2:Win32_Environment";
  const WMIQuery: string = "SELECT * FROM Win32_Environment";
  const wbemFlagReturnImmediately: integer = 16; -- значение по умолчанию для этого параметра. Приводит к немедленному возврату результатов запроса (полусинхронный режим).
  const wbemFlagForwardOnly: integer = 32; -- возвращает коллекцию типа forward-only (навигация только вперёд). Максимальная производительность и экономия памяти.
  const wbemFlagReturnWhenComplete: integer = 0; -- возвращает коллекцию в синхронном режме
  const wbemEnvSystemOwner: string = "<SYSTEM>"; -- имя системной среды

  func create : UserObject ;
    Result = inherited create;
    Result.WMIInitEnvVars;
  end;

inobject public
   Name: String; -- имя пременной
   Value: String; -- значение переменой
   Owner: String; -- владелец среды

 --{ setfield
 proc setfield(FieldName: String; FieldValue: variant);
   inherited setfield(FieldName, FieldValue);
   if    lo(FieldName) = lo("name"):
     -- получить значение для Value
     Name = FieldValue;
     Value = GetEnvVar(Name, Owner);
   elsif lo(FieldName) = lo("value"):
     -- установить переменную среды Name = Value;
     Value = FieldValue;
     SetEnvVar(Name, Value, Owner);
   elsif lo(FieldName) = lo("owner"):
     Owner = FieldValue;
     if Name <> nil:
       Value = GetEnvVar(Name, Owner);
     fi;
   fi;
 end;
 --}

  func GetEnvVar(EnvVarName: String; EnvOwner: string = EnvOwnerByDef): String;
     result = wmiGetEnvVar(EnvVarName, if(EnvOwner=nil, EnvOwnerByDef, EnvOwner));
  end;

  func GetEnvVarAllOwners(EnvVarName: String): String[];
    var index, iResult: integer;
    var locEnvVarValue: string;
    for index = 1.. lengthofarray(EnvOwners) do
      locEnvVarValue = wmiGetEnvVar(EnvVarName, EnvOwners[index]);
      if  locEnvVarValue <> nil:
        iResult = iResult + 1;
        result[iResult] = locEnvVarValue;
      fi;
    od;
  end;

proc SetEnvVar(EnvVarName:String; EnvVarValue: String; EnvOwner:String = EnvOwnerByDef);
  wmiSetEnvVar(EnvVarName, if(EnvOwner=nil, EnvOwnerByDef, EnvOwner), EnvVarValue);
end;

proc RemEnvVar(EnvVarName:String; EnvOwner:String = EnvOwnerByDef);
  wmiSetEnvVar(EnvVarName, if(EnvOwner=nil, EnvOwnerByDef, EnvOwner), nil);
end;

func GetEnvVarOwners: string[];
  var index: integer;
  for index = 1 .. lengthofarray(EnvOwners) do
   result[index] = EnvOwners[index];
  od;
end;


inobject private
  oEnvVars: Storage;
  EnvOwners: string[];
  EnvOwnerByDef: String; -- владелец среды по умолчанию

  func _GetFieldName(EnvVarName: String; EnvVarOwner: variant): String;
    var EnvOwnerIndex: Integer;
    if vartype(EnvVarOwner) = varInt :
      EnvOwnerIndex = EnvVarOwner;
    else
      EnvOwnerIndex = Searchinarray(EnvOwners, EnvVarOwner, , true);
      if EnvOwnerIndex <= 0:
        EnvOwnerIndex = 0;
      fi;
    fi;
    Result = '_' + str(EnvOwnerIndex) + '_' + EnvVarName;
  end;



--{ инициализаия хранилища переменных окружения ос
proc WMIInitEnvVars;
-- получть сервис
  --oSWbemServices = WMI.Service.CreateEx(WMICurrentServer, WMINameSpace);
  var oWMIService: AutoObject;
  var SWbemObjectSet: AutoObject;
  var index, count, evnownerindex: Integer;
  var SWbemObject: autoobject;
  var svarname, svarvalue, svarowner: string;
  oWMIService = autoobject.CreatePath(WMImoniker);
  SWbemObjectSet = oWMIService.ExecQuery(WMIQuery, "WQL", wbemFlagReturnWhenComplete);
  EnvOwners = nil;
  EnvOwnerByDef = nil;
  if oEnvVars = nil:
    oEnvVars=storage.Create;
  else
   oEnvVars.DeleteAllFields;
  fi;
  count = SWbemObjectSet.count-1;
  for index = 0 .. count do
    --SWbemObject = SWbemObjectSet.ItemIndex(index);
    SWbemObject = GetSWbemObject(SWbemObjectSet, index);
    svarowner = string(SWbemObject.username);
    if EnvOwnerByDef = nil:
      if pos(wbemEnvSystemOwner, up(svarowner))<>0:
        EnvOwnerByDef = svarowner;
      fi;
    fi;
    if not SearchNearestInArray(EnvOwners, svarowner, evnownerindex):
      InsertInArray(EnvOwners, evnownerindex, svarowner);
    fi;
    svarname = _GetFieldName(string(SWbemObject.name), evnownerindex);
    svarvalue = string(SWbemObject.VariableValue);
    oEnvVars.SetField(svarname, svarvalue);
  od;
end;
--}

--{ запись нового значения пременной окружения ос
proc wmiSetEnvVar(envVarName:String; EnvVarOwner: String; EnvVarValue: String);
  var oWMIClass, oWMI: AutoObject;
  oWMIClass = autoobject.createpath(WMIEnvClass);
  oWMI = oWMIClass.SpawnInstance_;
  oWMI.name = envVarName;
  oWMI.username = EnvVarOwner;
  oWMI.variablevalue = EnvVarValue;
  oWMI.Put_;
  oWMI = nil;
  oWMIClass = nil;
  WMIInitEnvVars;
  value = wmiGetEnvVar(Name, Owner);
end;

func wmiGetEnvVar(EnvVarName: string; EnvVarOwner: String):String;
  var locFieldName: String;
  if oEnvVars <> nil:
    locFieldName = _GetFieldName(EnvVarName, EnvVarOwner);
    if oEnvVars.fieldexists(locFieldName):
      result = oEnvVars.getfield(locFieldName);
    fi;
  fi;
end;

func GetSWbemObject(locSWbemObject: autoObject; locitemindex: integer): autoObject;
  var oScriptCtrl: AutoObject;
  var crlf: string;
--  var sErrMsg: string;
  crlf = chr(13) + chr(10);
  try
    oScriptCtrl=Autoobject.Create("MSScriptControl.ScriptControl");
  except
--    sErrMsg = '[' + tostr(ErrorCode)+'] '+ErrorText;
  end;
  if oScriptCtrl <> nil:
     oScriptCtrl.Language = "vbscript";
     oScriptCtrl.AddCode("Function EnumerateCollection(ObjSet,Number)" + crlf +
                         " Count = 0 " + crlf +
                         " For Each Obj In ObjSet "+ crlf +
                         " If Count = Number Then "+ crlf +
                         " Set EnumerateCollection = Obj "+ crlf +
                         " Exit Function "+ crlf +
                         " End If "+ crlf +
                         " Count = Count + 1 "+ crlf +
                         " Next "+ crlf +
                         " End Function ");
   try
     result = oScriptCtrl.Run("EnumerateCollection", locSWbemObject, locitemindex);
   except
--    sErrMsg = '[' + tostr(ErrorCode)+'] '+ErrorText;
   end;
  fi;
  if result = nil:
    try
      result = locSWbemObject.ItemIndex(locitemindex);
    except
--      sErrMsg = sErrMsg + CRLF + '[' + tostr(ErrorCode)+'] '+ErrorText;
    end;
  fi;
--  if result = nil and  sErrMsg <> '':
--     --Message(sErrMsg, mtWarning);
--  fi;
end;


end
