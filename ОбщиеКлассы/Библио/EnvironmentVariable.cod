class "переменные среды ОС";
  -- класс для обращения с переменным среды выполнения операционной системы
--import ТББ_БАЗОВЫЙ classes WMI.Service;


inclass public

  const WMINameSpace: String = "root/CIMV2"; -- пространство имен WMI
  const WMICurrentServer: String = ".";      -- имя текущего компьютера
  const WMImoniker: String = "winmgmts:\\.\root\cimv2";
  --const WMImoniker: String = "winmgmts://./root/cimv2";
  const WMIEnvClass: String = "winmgmts://./root/cimv2:Win32_Environment";
  const WMIQuery: string = "SELECT * FROM Win32_Environment";
  const wbemFlagReturnImmediately: integer = 16; -- значение по умолчанию для этого параметра. Приводит к немедленному возврату результатов запроса (полусинхронный режим).
  const wbemFlagForwardOnly: integer = 32; -- возвращает коллекцию типа forward-only (навигация только вперёд). Максимальная производительность и экономия памяти.
  const wbemFlagReturnWhenComplete: integer = 0; -- возвращает коллекцию в синхронном режме
  const lWMI: Logical = true;
  const lWshShell: Logical = not lWMI;

  func create : UserObject ;
    Result = inherited create;
    if lwmi:
      Result.WMIInitEnvVars;
    fi;
  end;

  type tEnvType =
  ( EnvType_System = 1, EnvType_User, EnvType_Volatile, EnvType_Process);

  aEnvTypeCode: string[] = ["System", "User", "Volatile", "Process"];
  aEnvTypeName: string[] = ["Системные переменные окружения",
                            "Пользовательские переменные окружения",
                            "Временные переменные окружения",
                            "Переменные окружения текущего командного окна"];

inobject public
   Name: String; -- имя пременной
   Value: String; -- значение переменой
   EnvType: tEnvType:= EnvType_System; -- тип переменной

--   ExpandEnvironmentStrings
 --{ setfield
 proc setfield(FieldName: String; FieldValue: variant);
   inherited setfield(FieldName, FieldValue);
   if    lo(FieldName) = lo("name"):
     -- получить значение для Value
     Name = FieldValue;
     Value = GetEnvVar(Name, EnvType);
   elsif lo(FieldName) = lo("value"):
     -- установить переменную среды Name = Value;
     Value = FieldValue;
     SetEnvVar(Name, EnvType, Value);
   elsif lo(FieldName) = lo("envtype"):
     EnvType = FieldValue;
     if name <> nil:
       Value = GetEnvVar(Name, EnvType);
     fi;
     if lWshShell :
       if EnvType <> nil:
         if  oWshShell = nil:
           oWshShell = autoobject.OpenOrCreate("WScript.Shell", true);
         fi;
         --oEnvironment = oWshShell.Environment(GetEnvTypeCode(EnvType));
         --oEnvironment = oWshShell.invoke("Environment",up(GetEnvTypeCode(EnvType)));
         oEnvironment = oWshShell.Environment;
       else
         oEnvironment =  nil;
       fi;
     fi;
   fi;
 end;
 --}

inobject private
  oEnvVars: Storage;
  oWshShell: AutoObject;
  oEnvironment: AutoObject;
  -- oWMIService: WMI.Service;


  func GetEnvTypeCode(locEnvType: tEnvType): String ;
    Result = aEnvTypeCode[locEnvType];
  end;

  func GetEnvTypeName(locEnvType: tEnvType): String ;
    Result = aEnvTypeName[locEnvType];
  end;

  func _GetFieldName(locEnvVarName: String; locEnvType: tEnvType): String;
    --Result = '_' + str(GetEnvTypeCode(locEnvType)) + '_' + locEnvVarName;
    Result = '_' + str(locEnvType) + '_' + locEnvVarName;
  end;

  func GetEnvType(locEnvVarUserName:String):tEnvType;
    var iter: integer;
    for  iter = 1 .. lengthofarray(aEnvTypeCode) do
      if up(locEnvVarUserName) =  '<' + up(aEnvTypeCode[iter]) + '>':
        Result = tEnvType(iter);
        break;
      fi;
    od;
  end;

  func EnvType2EnvUserName(locEnvType: tEnvType): String;
    Result = '<' + up(GetEnvTypeCode(locEnvType)) + '>';
  end;


  func GetEnvVar(EnvVarName: String; EnvType:tEnvType): String;
   if lwmI :
     result = wmiGetEnvVar(EnvVarName, EnvType);
   else
     result = WshShellGetEnvVar(EnvVarName, EnvType);
   fi;
  end;


proc SetEnvVar(EnvVarName:String; EnvType:tEnvType; EnvVarValue: String);
   if lwmI :
     wmiSetEnvVar(EnvVarName, EnvType, EnvVarValue);
   else
     WshShellSetEnvVar(EnvVarName, EnvType, EnvVarValue);
   fi;
end;

  func WshShellGetEnvVar(EnvVarName: String; EnvType:tEnvType): String;
    if  oWshShell = nil:
      oWshShell = autoobject.OpenOrCreate("WScript.Shell", true);
      if EnvType <> nil:
        --oEnvironment = oWshShell.Environment(GetEnvTypeCode(EnvType));
        --oEnvironment = oWshShell.invoke("Environment",up(GetEnvTypeCode(EnvType)));
        oEnvironment = oWshShell.Environment;
      fi;
    fi;
    if oEnvironment <> nil :
      Result = oEnvironment.Item(EnvVarName);
      --Result = oEnvironment.invoke("Item",EnvVarName);
    fi;
  end;

  proc WshShellSetEnvVar(EnvVarName:String; EnvVarType:tEnvType; EnvVarValue: String);
      if  oWshShell = nil:
        oWshShell = autoobject.OpenOrCreate("WScript.Shell", true);
        if EnvType <> nil:
          --oEnvironment = oWshShell.Environment(GetEnvTypeCode(EnvType));
          --oEnvironment = oWshShell.invoke("Environment",up(GetEnvTypeCode(EnvType)));
          oEnvironment = oWshShell.Environment;
        fi;
      fi;
      if oEnvironment <> nil :
        --oEnvironment.Item(EnvVarName, EnvVarValue);
        oEnvironment.invoke("Item",EnvVarName, EnvVarValue);
      fi;
  end;

--{ инициализаия хранилища переменных окружения ос
proc WMIInitEnvVars;
-- получть сервис
  --oSWbemServices = WMI.Service.CreateEx(WMICurrentServer, WMINameSpace);
  var oWMIService: AutoObject;
  var SWbemObjectSet: AutoObject;
  var index, count: Integer;
  var SWbemObject: autoobject;
  var svarname, svarvalue: string;
  oWMIService = autoobject.CreatePath(WMImoniker);
  SWbemObjectSet = oWMIService.ExecQuery(WMIQuery, "WQL", wbemFlagReturnWhenComplete);
  if oEnvVars = nil:
    oEnvVars=storage.Create;
  else
   oEnvVars.DeleteAllFields;
  fi;
  count = SWbemObjectSet.count-1;
  for index = 0 .. count do
    SWbemObject = SWbemObjectSet.ItemIndex(index);
    svarname = _GetFieldName(string(SWbemObject.name), GetEnvType(string(SWbemObject.username)));
    svarvalue = string(SWbemObject.VariableValue);
    oEnvVars.SetField(svarname, svarvalue);
  od;
end;
--}

--{ запись нового значения пременной окружения ос
proc wmiSetEnvVar(envVarName:String; EnvVarType: tEnvtype; EnvVarValue: String);
  var oWMIClass, oWMI: AutoObject;
  oWMIClass = autoobject.createpath(WMIEnvClass);
  oWMI = oWMIClass.SpawnInstance_;
  oWMI.name = envVarName;
  oWMI.username = EnvType2EnvUserName(EnvVarType);
  oWMI.varvalue = EnvVarValue;
  oWMI.Put_;
end;

func wmiGetEnvVar(EnvVarName: string; EnvType:tEnvType):String;
  var locFieldName: String;
  if oEnvVars <> nil:
    locFieldName = _GetFieldName(EnvVarName, EnvType);
    if oEnvVars.fieldexists(locFieldName):
      result = oEnvVars.getfield(locFieldName);
    fi;
  fi;
end;

end